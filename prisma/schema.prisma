// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  courses       Course[]

  stripeCustomerId String? @unique

  role       String?
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?
  enrollment Enrolment[]


  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Course {
  id               String       @id @default(uuid())
  slug             String       @unique
  title            String
  description      String
  smallDescription String
  category         String
  fileKey          String
  duration         Int
  price            Int
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  level            CourseLevel  @default(Beginner)
  status           CourseStatus @default(Draft)
  userId           String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  chapters Chapter[]
  enrollment Enrolment[]
}



model Lesson {
  id               String       @id @default(uuid())

  title String
  description String?
  videoKey String
  thumbnailKey String
    createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  position Int

  chapterId           String
chapter         Chapter       @relation(fields: [chapterId], references: [id], onDelete: Cascade)


}



model Chapter{
  id               String       @id @default(uuid())
  title String


  position Int
    createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  course             Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  lessons  Lesson []

}


model Enrolment {
   id               String       @id @default(uuid())
   amount Int
  createdAt        DateTime     @default(now())
  status EnrolmentStatus @default(Pending)
  updatedAt        DateTime     @updatedAt
    courseId           String
course           Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userId           String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}


enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
  Archived
}

enum EnrolmentStatus {
  Cancelled
  Active
  Pending
}